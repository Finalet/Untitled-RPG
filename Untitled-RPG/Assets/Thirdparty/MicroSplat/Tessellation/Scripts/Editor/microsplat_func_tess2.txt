// post vertex



#if _MSRENDERLOOP_SURFACESHADER
               #include "Tessellation.cginc"
               float4 TessDistance (appdata v0, appdata v1, appdata v2) 
               {
                  return UnityDistanceBasedTess(v0.vertex, v1.vertex, v2.vertex, _TessData2.x, _TessData2.y, _TessData1.x);
               }

#elif _MSRENDERLOOP_UNITYLD


#if defined(SHADER_API_XBOXONE) || defined(SHADER_API_PSSL)
   // AMD recommand this value for GCN http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/05/GCNPerformanceTweets.pdf
   #define MAX_TESSELLATION_FACTORS 15.0
#else
   #define MAX_TESSELLATION_FACTORS 64.0
#endif
            struct OutputPatchConstant {
                float edge[3]         : SV_TessFactor;
                float inside          : SV_InsideTessFactor;
            };
             
            struct TessVertex 
            {
               float4 vertex : INTERNALTESSPOS;
               float3 normal : NORMAL;
               float4 tangent : TANGENT;
               float4 texcoord0 : TEXCOORD0;
               float4 texcoord1 : TEXCOORD1;
               float4 texcoord2 : TEXCOORD2; // shadowcoords
               UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            float MSCalcDistanceTessFactor (float3 wpos, float minDist, float maxDist, float tess)
            {
               float dist = distance (wpos, _WorldSpaceCameraPos);
               float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
               return f;
            }

            float4 MSCalcTriEdgeTessFactors (float3 triVertexFactors)
            {
               float4 tess;
               tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
               tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
               tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
               tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
               return tess;
            }


            float4 MSDistanceBasedTess (float3 v0, float3 v1, float3 v2, float minDist, float maxDist, float tess)
            {
               float3 f;
               f.x = MSCalcDistanceTessFactor (v0,minDist,maxDist,tess);
               f.y = MSCalcDistanceTessFactor (v1,minDist,maxDist,tess);
               f.z = MSCalcDistanceTessFactor (v2,minDist,maxDist,tess);

               return MSCalcTriEdgeTessFactors (f);
            }

             float4 Tessellation (TessVertex v0, TessVertex v1, TessVertex v2) 
             {
                return MSDistanceBasedTess(v0.vertex, v1.vertex, v2.vertex, _TessData2.x, _TessData2.y, _TessData1.x);
             }

             OutputPatchConstant hullconst (InputPatch<TessVertex,3> v) 
             {
                 OutputPatchConstant o = (OutputPatchConstant)0;
                 float4 tf = Tessellation( v[0], v[1], v[2] );
                 tf = min(tf, MAX_TESSELLATION_FACTORS);
                 o.edge[0] = tf.x;
                 o.edge[1] = tf.y;
                 o.edge[2] = tf.z;
                 o.inside  = tf.w;
                 return o;
             }

             [maxtessfactor(MAX_TESSELLATION_FACTORS)]
             [domain("tri")]
             [partitioning("fractional_odd")]
             [outputtopology("triangle_cw")]
             [patchconstantfunc("hullconst")]
             [outputcontrolpoints(3)]
             TessVertex hull (InputPatch<TessVertex,3> v, uint id : SV_OutputControlPointID) 
             {
                 return v[id];
             }
             
             

             TessVertex tessvert(GraphVertexInput i)
             {
                UNITY_SETUP_INSTANCE_ID(i);
                TessVertex o = (TessVertex)o;
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                #if !_DEBUG_USE_TOPOLOGY && UNITY_VERSION >= 201830 && !_TERRAINBLENDABLESHADER && !_MICROMESH && !_MICROMESHTERRAIN && !_MICROPOLARISMESH &&!_MICRODIGGERMESH && !_MICROVERTEXMESH && defined(UNITY_INSTANCING_ENABLED) && !defined(SHADER_API_D3D11_9X)
                    float2 patchVertex = i.vertex.xy;
                    float4 instanceData = UNITY_ACCESS_INSTANCED_PROP(Terrain, _TerrainPatchInstanceData);
                    
                    float4 uvscale = instanceData.z * _TerrainHeightmapRecipSize;
                    float4 uvoffset = instanceData.xyxy * uvscale;
                    uvoffset.xy += 0.5f * _TerrainHeightmapRecipSize.xy;
                    float2 sampleCoords = (patchVertex.xy * uvscale.xy + uvoffset.xy);

                    float hm = UnpackHeightmap(SAMPLE_TEXTURE2D_LOD(_TerrainHeightmapTexture, sampler_TerrainNormalmapTexture, sampleCoords, 0));
                    i.vertex.xz = (patchVertex.xy + instanceData.xy) * _TerrainHeightmapScale.xz * instanceData.z;  //(x + xBase) * hmScale.x * skipScale;
                    i.vertex.y = hm * _TerrainHeightmapScale.y;
                    i.vertex.w = 1.0f;
                    
                    i.texcoord0.xy = (patchVertex.xy * uvscale.zw + uvoffset.zw);
                    
                    i.normal = float3(0,1,0);
                    float3 norm = SAMPLE_TEXTURE2D_LOD(_TerrainNormalmapTexture, sampler_TerrainNormalmapTexture, sampleCoords, 0).xyz;
                    i.normal = norm * 2 - 1;
                #endif 
                 
                o.vertex = i.vertex;
                o.normal = i.normal;
                o.tangent = i.tangent;
                o.texcoord0 = i.texcoord0;
                o.texcoord1 = i.texcoord1;
                o.texcoord2 = i.texcoord2;
                
                UNITY_TRANSFER_INSTANCE_ID(i, o);
   
                return o;
            }


             [domain("tri")]
             #if PASSSHADOW || PASSDEPTH || PASSMETA
                VertexOutput
             #else
                GraphVertexOutput
             #endif
                 domain (OutputPatchConstant tessFactors, const OutputPatch<TessVertex,3> vi, float3 bary : SV_DomainLocation) 
             {
                 GraphVertexInput v = (GraphVertexInput)0;
                 
                 UNITY_TRANSFER_INSTANCE_ID(vi[0], v);
                 v.vertex = vi[0].vertex * bary.x + vi[1].vertex * bary.y + vi[2].vertex * bary.z;
                 v.normal = vi[0].normal * bary.x + vi[1].normal * bary.y + vi[2].normal * bary.z;
                 v.tangent = vi[0].tangent * bary.x + vi[1].tangent * bary.y + vi[2].tangent * bary.z;
                 v.texcoord0 = vi[0].texcoord0 * bary.x + vi[1].texcoord0 * bary.y + vi[2].texcoord0 * bary.z;
                 v.texcoord1 = vi[0].texcoord1 * bary.x + vi[1].texcoord1 * bary.y + vi[2].texcoord1 * bary.z;
                 v.texcoord2 = vi[0].texcoord2 * bary.x + vi[1].texcoord2 * bary.y + vi[2].texcoord2 * bary.z;
                 v.vertex.xyz += OffsetVertex(v.vertex, v.normal, v.tangent, v.texcoord0).xyz; 
                 
                 #if defined(UNITY_INSTANCING_ENABLED)
                 v.normal = float3(0,1,0);
                 #endif

                 #if PASSSHADOW
                 VertexOutput o = ShadowPassVertex(v);
                 #elif PASSDEPTH || PASSMETA
                 VertexOutput o = vert(v);
                 #else
                 GraphVertexOutput o = vert(v);
                 #endif
                 
                 return o;
             }

#elif _MSRENDERLOOP_UNITYHD


#endif // LD
             

             