

    // MAINFUNCTION INSERT




    
    MicroSplatLayer DoMicroSplat(inout SurfaceDescriptionInputs IN)
    {
       SurfaceDescription surface = (SurfaceDescription)0;
       Input i = DescToInput(IN);
       float3 worldNormalVertex = IN.WorldSpaceNormal;

        #if defined(UNITY_INSTANCING_ENABLED) && !_MICROMESH && !_MICROMESHTERRAIN && !_MICROPOLARISMESH && !_MICRODIGGERMESH && !_MICROVERTEXMESH && !PASSSHADOW && !_TERRAINBLENDABLESHADER
            float2 sampleCoords = (i.uv_Control0 / _TerrainHeightmapRecipSize.zw + 0.5f) * _TerrainHeightmapRecipSize.xy;
            #if _TOONHARDEDGENORMAL
               sampleCoords = ToonEdgeUV(sampleCoords);
            #endif

            float3 geomNormal = normalize(SAMPLE_TEXTURE2D(_TerrainNormalmapTexture, sampler_TerrainNormalmapTexture, sampleCoords).xyz * 2 - 1);
            float3 geomTangent = normalize(cross(geomNormal, float3(0, 0, 1)));
            float3 geomBitangent = normalize(cross(geomTangent, geomNormal));
            i.TBN = float3x3(geomTangent, geomBitangent, geomNormal);
            i.worldNormal = geomNormal;
            worldNormalVertex = geomNormal;

            #if _TERRAINBLENDABLESHADER
               IN.WorldSpaceNormal = geomNormal;
               IN.WorldSpaceTangent = geomTangent;
               IN.WorldSpaceBiTangent = geomBitangent;
            #endif

        #elif _PERPIXNORMAL
            float2 sampleCoords = ((i.uv_Control0 * _PerPixelNormal_TexelSize.zw) + 0.5) * _PerPixelNormal_TexelSize.xy;
            #if _TOONHARDEDGENORMAL
               sampleCoords = ToonEdgeUV(sampleCoords);
            #endif
            float3 geomNormal = (UnpackNormal(UNITY_SAMPLE_TEX2D_SAMPLER(_PerPixelNormal, _Diffuse, sampleCoords)).xzy);
            float3 geomTangent = normalize(cross(geomNormal, float3(0, 0, 1)));
            float3 geomBitangent = normalize(cross(geomTangent, geomNormal));
            i.TBN = float3x3(geomTangent, geomBitangent, geomNormal);
            i.worldNormal = geomNormal;
            worldNormalVertex = geomNormal;
            IN.WorldSpaceNormal = geomNormal;
            IN.WorldSpaceTangent = geomTangent;
            IN.WorldSpaceBiTangent = geomBitangent;
        #endif    
        
         
         #if _SRPTERRAINBLEND
            SurfaceOutputCustom soc = (SurfaceOutputCustom)0;
            soc.input = i;
            float3 sh = 0;
            BlendWithTerrainSRP(soc, IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);

            MicroSplatLayer l = (MicroSplatLayer)0;
            l.Albedo = soc.Albedo;
            l.Normal = mul(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal), soc.Normal);
            l.Emission = soc.Emission;
            l.Metallic = soc.Metallic;
            l.Smoothness = soc.Smoothness;
            #if _USESPECULARWORKFLOW
            l.Specular = soc.Specular;
            #endif
            l.Occlusion = soc.Occlusion;
            l.Alpha = soc.Alpha;

         #else
            MicroSplatLayer l = SurfImpl(i, worldNormalVertex);
         #endif

         
        #if (defined(UNITY_INSTANCING_ENABLED)) && !_MICROMESH && !_MICROMESHTERRAIN && !_MICROPOLARISMESH && !_MICRODIGGERMESH && !_MICROVERTEXMESH && !PASSSHADOW && !_TERRAINBLENDABLESHADER   
           l.Normal = l.Normal.x * geomTangent + l.Normal.y * geomBitangent + l.Normal.z * geomNormal;
           l.Normal = l.Normal.xzy;
        #elif _DEBUG_FINALNORMALTANGENT && !_MICROMESH && !_MICROVERTEXMESH
            float3 geomNormal = worldNormalVertex;
            float3 geomTangent = normalize(cross(geomNormal, float3(0, 0, 1)));
            float3 geomBitangent = normalize(cross(geomTangent, geomNormal));
            l.Normal = l.Normal.x * geomTangent + l.Normal.y * geomBitangent + l.Normal.z * geomNormal;
            l.Normal = l.Normal.xzy;
         #endif

         #if _DEBUG_FINALNORMALTANGENT
            l.Albedo = l.Normal * saturate(l.Albedo.z+1);
            l.Normal = half3(0.5, 0.5, 1);
            #if _SPECULARFROMMETALLIC
               l.Occlusion = 1;
               l.Smoothness = 0;
            #elif _USESPECULARWORKFLOW
               l.Occlusion = 1;
               l.Smoothness = 0;
               l.Specular = 0;
            #else
               l.Smoothness = 0;
               l.Metallic = 0;
               l.Occlusion = 1;
            #endif
         #endif

        DoDebugOutput(l);

        return l;
    }



        